/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package is3calendar2;

import calendarCode.Appointment;
import calendarCode.CalendarDate;
import calendarCode.CalendarEx;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.util.List;

/**
 *
 * @author 1102486t
 */
public class BusynessGraph extends javax.swing.JPanel {

    private CalendarEx cal;

    public void setCal(CalendarEx cal) {
        this.cal = cal;
    }

    public void setCurrentDay(CalendarDate currentDay) {
        this.currentDay = currentDay;
    }
    private int year;
    private CalendarDate currentDay;
    private int category;
    private MainFrame mainF;
    private List<Appointment> appList;
    private int[] data;
    private final int PAD = 100;
    private int maxApp = 0;

    /**
     * Creates new form BusynessGraph
     */
    public BusynessGraph() {
        initComponents();
    }

    public BusynessGraph(MainFrame mf, CalendarEx calendar, CalendarDate curDay) {
        initComponents();
        mainF = mf;
        resetData(calendar, curDay);

    }
    
    public void resetData(CalendarEx calendar, CalendarDate curDay){
        cal = calendar;
        currentDay = curDay;
        
        CalendarDate firstDay = new CalendarDate(1, 1, curDay.year);
        CalendarDate lastDay = CalendarDate.moveDay(-1, new CalendarDate(1, 1, curDay.year + 1));

        appList = calendar.getAppointmentsBetweenDates(firstDay, lastDay);


        data = new int[lastDay.dateID - firstDay.dateID];


        for (Appointment app : appList) {
            if ((app.date.dateID - firstDay.dateID + 1) < data.length) {
                data[app.date.dateID - firstDay.dateID + 1]++;
                if (data[app.date.dateID - firstDay.dateID + 1] > maxApp) {
                    maxApp = data[app.date.dateID - firstDay.dateID + 1];
                }
            }
        }
    }

    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        int w = getWidth();
        int h = getHeight();
        g2.drawLine(PAD, PAD, PAD, h - PAD);
        g2.drawLine(PAD, h - PAD, w - PAD, h - PAD);
        double xScale = (w - 2 * PAD) / (data.length + 1) * 1.7;
        double yScale;
        if (maxApp > 0) {
            yScale = (h - 2 * PAD) / maxApp;
        } else {
            yScale = 1;
        }




        // The origin location.  
        int x0 = PAD;
        int y0 = h - PAD;
        g2.setPaint(Color.red);

        int prevX = x0, prevY = y0;

        g2.setFont(new Font("TimesRoman", Font.PLAIN, 16));

        int q = (int) (w / xScale / 11) + PAD / 2 + (w - 2 * PAD) / 24 - 8;
        for (int i = 1; i < 13; i++) {
            g2.drawString(CalendarEx.monthToString(i).substring(0, 3), q, y0 + 50);
            q += (w - 2 * PAD) / 12;
        }

        for (int j = 0; j < data.length; j++) {
            int x = x0 + (int) (xScale * (j + 1));
            int y = y0 - (int) (yScale * data[j]);

            g2.drawLine(prevX, prevY, x, y);
            prevX = x;
            prevY = y;



            if (data[j] == maxApp) {
                g2.setFont(new Font("TimesRoman", Font.PLAIN, 10));
                g2.drawString("(peak of " + Integer.toString(maxApp) + " events)", x0 - 95, y);
            }

        }





    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
